// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {AccessControl} from "@openzeppelin/contracts/access/AccessControl.sol";

/**
 * @title RebaseToken
 * @author Loc Giang
 * @notice This is a corss-chain rebase token that incentivises users to deposit into a vault
 * and gain interest in rewards.
 * @notice The interest rate in the smart contract can only decrease
 * @notice Each user will have their own interest rate that is the global 
 * interest rate at the time of depositing.
 */

contract RebaseToken is ERC20, Ownable, AccessControl {
    error RebaseToken__InterestRateCanOnlyDecrease(uint256 currentInterestRate, uint256 newInterestRate);

    /////////////////////
    // State Variables //
    ///////////////////// 

    // used to handle fixed-point calculations
    uint256 private constant PRECISION_FACTOR = 1e18; 

    // role for minting and burning tokens (the pool and vault contracts)
    bytes32 private constant MINT_AND_BURN_ROLE = keccak256("MINT_AND_BURN_ROLE");

    // keeps track of the interest rate of the user at the time of deposited
    mapping(address => uint256) private s_userInterestRate; 

    // the last time a user balance was updated to mint accrued interest
    mapping(address => uint256) private s_userLastUpdatedTimestamp;

    // this is the global interest rate of the token - when users mint
    // or recieve via transferral, this is the interest rate they will get.
    uint256 private s_interestRate = 5e10;

    ///////////
    // Event //
    ///////////
    
    event InterestRateSet(uint256 newInterestRate);

    /////////////////
    // Constructor //
    /////////////////

    constructor() Ownable(msg.sender) ERC20("RebaseToken", "RBT") {}

    ///////////////
    // Functions //
    ///////////////

    /**
     * @dev grants the mint and burn role to an address. This is only called by the protocol owner.
     * @param _address the address to grant the role to
     */
    function grandMintAndBurnRole(address _address) external onlyOwner {
        _grantRole(MINT_AND_BURN_ROLE, _address);
    }

    /**
     * @notice set the interest rate in the contract
     * @param _newInterestRate the new interest rate to set
     * @dev the interest rate can only decrease
     */
    function setInterestRate(uint256 _newInterestRate) external onlyOwner {
        // set the interest rate
        if (_newInterestRate > s_interestRate) {
            revert RebaseToken__InterestRateCanOnlyDecrease(s_interestRate, _newInterestRate);
        }
        s_interestRate = _newInterestRate;
        emit InterestRateSet(_newInterestRate);
    }

    /**
     * @dev returns the principal balance of the user. The principal balance is the last
     * updated stored balance, which does not consider the perpetually
     * accruing interest that has not yet been minted.
     * @param _user the address of the user
     * @return the principal balance of the user
     */
    function principalBalanceOf(address _user) external view returns (uint256) {
        return super.balanceOf(_user);
    }

    /**
     * @notice mints new tokens for a given address. called when a user either deposits
     * or bridges tokens to this chain.
     * @param _to the address to mint the tokens to
     * @param _value the number of tokens to mint
     * @param _userInterestRate the interest rate of the user.
     * this is either the contract interest rate if the user is depositing
     * or the user's interest rate from the source token if the user is bridging
     * @dev this function increases the total supply
     */
    function mint(address _to, uint256 _value, uint256 _userInterestRate) public onlyRole(MINT_AND_BURN_ROLE) {
        // mints any existing interest that has accrued since the last time the user's balance was updated
        _mintAccruedInterest(_to);

        // sets the users interest rate to either their bridged value if they are bridging 
        // or to the current interest rate if they are depositing
        s_userInterestRate[_to] = _userInterestRate;
        _mint(_to, _value);
    }

    /**
     * @notice burns tokens from the sender
     * @param _from the address to burn the tokens from
     * @param _value the number of tokens to be burned
     * @dev this function decreases the total supply 
     */
    function burn(address _from, uint256 _value) public onlyRole(MINT_AND_BURN_ROLE) {
        // mints any existing interest that has accrued since the last time the user's balance was updated
        _mintAccruedInterest(_from);
        _burn(_from, _value);
    }

    /**
     * @dev calculates the balance of the user
     * which is the principal balance + interest generated by the principal balance
     * @param _user the user for which the balance is being calculated
     * @return total balance of the user
     */
    function balanceOf(address _user) public view override returns (uint256) {
        // current principal balance of the user
        uint256 currentPrincipalBalance = super.balanceOf(_user);
        if (currentPrincipalBalance == 0) {
            return 0;
        }
        // shares * current accumulated interest for that user since their interest was last minted to them
        return (currentPrincipalBalance * _calculateAccumulatedInterestSinceLastUpdate(_user)) / PRECISION_FACTOR;
    }

    /**
     * @dev transfers tokens from the sender to the recipient.
     * this function also mints any accrued interest since the last time the user's balance was updated.
     * @param _recipient the address of the recipient
     * @param _amount the amount of tokens to transfer
     * @return true if the transfer was successful
     */
    function transfer(address _recipient, uint256 _amount) public override returns (bool) {
        // accumulate the balance of the user so it is up to date wih any interest accumulated.
        if (_amount == type(uint256).max) {
            _amount = balanceOf(msg.sender);
        }
        _mintAccruedInterest(msg.sender);
        _mintAccruedInterest(_recipient);
        if (balanceOf(_recipient) == 0) {
            // update the users interest rate only if they have not yet got one
            // (or they transferred/burned all their tokens).
            // otherwise people could force other to have lower interest rates
            s_userInterestRate[_recipient] = s_interestRate;
        }
        return super.transfer(_recipient, _amount);
    }

    /**
     * @dev accumulates the accrued interest of the user to the principal balance.
     * This function mints the users accrued interest since they last transferred of bridge tokens.
     * @param _user the address of the user for which the interest is being minted
     */
    function _mintAccruedInterest(address _user) internal {
        // get the user's previous principal balance.
        // the amount of tokens they had last time their interest was minted to them.
        uint256 previousPrincipalBalance = super.balanceOf(_user);

        // calculate the accrued interest since the last accumulation
        // 'balanceOf' returns the user's interest rate
        //      and the time since their last update to get the updated balance
        uint256 currentBalance = balanceOf(_user);
        uint256 balanceIncrease = currentBalance - previousPrincipalBalance;

        // mint the amount of tokens equivalent to the interest accrued
        _mint(_user, balanceIncrease);

        // update the user's last updated timestamp to reflect this most recent time their interest
        // was minted to them
        s_userLastUpdatedTimestamp[_user] = block.timestamp;
    }

    /**
     * @dev returns the interest accrued since the last update of the user's balance.
     * aka since the last time the interest accrued was minted to the user.
     * @return linearInterest the interest accrued since the last update
     */
    function _calculateAccumulatedInterestSinceLastUpdate(address _user)
        internal
        view
        returns(uint256)
    {
        uint256 timeDifference = block.timestamp - s_userLastUpdatedTimestamp[_user];
        // represents the linear growth over time = 1 + (interest rate * time)
        uint256 linearInterest = (s_userInterestRate[_user] * timeDifference) + PRECISION_FACTOR;
        return linearInterest;
    }
}
